#!/usr/bin/env python

import os
import sys
import urllib2
import json
import colorful

def print_error(msg):
    print colorful.red(msg)
    exit()

def print_success(msg):
    print colorful.green(msg)

def test_system():
    """Runs few tests to check if npm and peerflix is installed on the system."""
    if os.system('npm --version') != 0:
        print_error('NPM not installed installed, please read the Readme file for more information.')
    if os.system('peerflix --version') != 0:
        print 'Peerflix not installed, installing..'
        os.system('npm install -g peerflix')

def get_input():
    """Gets the input from user and formats it."""
    try:
        query = ' '.join(sys.argv[1:])
        movie_name = ' '.join(query.split()[0:])
        return movie_name
    except Exception as e:
        print e
        exit()
    return query

def get_yts_movie_options(url):
    '''Make HTTP request to YTS api and retrieve a list of movies'''
    hdr = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11',
       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
       'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
       'Accept-Encoding': 'none',
       'Accept-Language': 'en-US,en;q=0.8',
       'Connection': 'keep-alive'}
    req = urllib2.Request(url, headers=hdr)
    try:
        page = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
        print e.fp.read()

    # Parse the JSON
    j = json.load(page)
    if j['status'] == 'ok':
        numMovies = j['data']['movie_count']

        if numMovies > 0:
            movies = j['data']['movies']
            moviesList = []
            i=0
            for movie in movies:
                i += 1
                print str(i) + ". " + movie['title']
                moviesList.append(movie)
            return moviesList
        else:
            print_error("Could not find any matching movies")
    else:
        print_error("Something went wrong: " + j['status'])

def get_magnets(movie):
    '''Get magnet information from the chosen movie'''
    first="magnet:?xt=urn:btih:"
    second="&dn="
    third=["udp://open.demonii.com:1337/announce","udp://tracker.openbittorrent.com:80","udp://tracker.coppersurfer.tk:6969","udp://glotorrents.pw:6969/announce"]
    
    torrent_options = movie["torrents"]
    magnet_hash = ""
    for option in torrent_options:
        # Try to get 1080p, otherwise get 720p
        if option["quality"] == "1080p":
            magnet_hash = option["hash"]
            break
        magnet_hash = option["hash"]

    magnet = first + magnet_hash + second + movie['url']

    for item in third:
        magnet += "&tr=" + item
    return magnet

def get_yts_magnet(movie_name = 'Saw'):
    URL = 'https://yts.ag/api/v2/list_movies.json?quality=1080p&limit=10&query_term='+movie_name.replace(' ', '+')

    movies = get_yts_movie_options(URL)
    print "GOT MOVIES : " + str(movies)
    if len(movies) == 0:
        print_error("Could not find any movies")
    elif len(movies) == 1:
        return get_magnets(movies[0])
    else:
        sys.stdout.write("Choose the number of the movie that you want to stream: ")
        choice = int(sys.stdin.read(1))
        return get_magnets(movies[int(choice) - 1])

def main():
    print "--- Checking System ---"
    test_system()
    movie = get_input()
    print_success("All Good!")
    print "--- Getting Movie Options ---"
    try:
        command = 'peerflix "' + get_yts_magnet(movie) + '" --vlc'
        os.system(command)
    except Exception as e:
        print e
        exit()

if __name__ == '__main__':
    main()
